
E:/IntelFPGAProgram_ComputerOrganization_Lab7/Part1/Part1.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	2c 04 00 00 30 04 00 00 34 04 00 00 38 04 00 00     ,...0...4...8...
  30:	3c 04 00 00 d4 07 00 00 fc 03 00 00 40 04 00 00     <...........@...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001a5 	bl	770 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000008bc 	.word	0x000008bc

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000cf8 	.word	0x00000cf8

00000124 <__cs3_heap_start_ptr>:
 124:	00000d20 	.word	0x00000d20

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d00 	.word	0x00000d00
 170:	00000d03 	.word	0x00000d03
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d00 	.word	0x00000d00
 1bc:	00000d00 	.word	0x00000d00
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d00 	.word	0x00000d00
 200:	00000000 	.word	0x00000000
 204:	00000860 	.word	0x00000860

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000860 	.word	0x00000860
 250:	00000d04 	.word	0x00000d04
 254:	000008c0 	.word	0x000008c0
 258:	00000000 	.word	0x00000000

0000025c <disable_A9_interrupts>:

/* disable interrupts in the A9 processor */
void disable_A9_interrupts(void)
{
    int status = 0b11010011; // 11: disable interrupte, 0: arm mode, 10011: supervisor mode
    asm(
 25c:	e3a030d3 	mov	r3, #211	; 0xd3
 260:	e129f003 	msr	CPSR_fc, r3
 264:	e12fff1e 	bx	lr

00000268 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = 0xFFFFFFFF - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = 0b11010010; // 11: disable interrupte, 0: arm mode, 10010: IRQ mode
    asm(
 268:	e3a030d2 	mov	r3, #210	; 0xd2
 26c:	e129f003 	msr	CPSR_fc, r3
        "msr cpsr, %[ps]"
        :
        : [ps] "r" (mode)
        );
    /* set banked stack pointer */
    asm(
 270:	e3e03007 	mvn	r3, #7
 274:	e1a0d003 	mov	sp, r3
        :
        : [ps] "r" (stack)
        );
    /* go back to SVC mode before executing subroutine return! */
    mode = 0b11010011;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 278:	e3a030d3 	mov	r3, #211	; 0xd3
 27c:	e129f003 	msr	CPSR_fc, r3
 280:	e12fff1e 	bx	lr

00000284 <config_interrupt>:
}

/* Config Distributer part of GIC */
void config_interrupt(int N, int CPU_target)
{
 284:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    int reg_offset, index, value, address;
    /* Configure the Interrupt Set-Enable Registers (ICDISERn).
    reg_offset = (integer_div(N / 32) * 4
    value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC;
 288:	e1a031c0 	asr	r3, r0, #3
 28c:	e3c33003 	bic	r3, r3, #3
    index = N & 0x1F;
    value = 0x1 << index;
    address = 0xFFFED100 + reg_offset;
 290:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    int reg_offset, index, value, address;
    /* Configure the Interrupt Set-Enable Registers (ICDISERn).
    reg_offset = (integer_div(N / 32) * 4
    value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC;
    index = N & 0x1F;
 294:	e200201f 	and	r2, r0, #31
    value = 0x1 << index;
    address = 0xFFFED100 + reg_offset;
    /* Now that we know the register address and value, set the appropriate bit */
    *(int *)address |= value;
 298:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
 29c:	e3a04001 	mov	r4, #1
 2a0:	e18c2214 	orr	r2, r12, r4, lsl r2
 2a4:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
    reg_offset = (N & 0xFFFFFFFC);
    index = N & 0x3;
    address = 0xFFFED800 + reg_offset + index;
    /* Now that we know the register address and value, write to (only) the
    appropriate byte */
    *(char *)address = (char)CPU_target;
 2a8:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
 2ac:	e5c01000 	strb	r1, [r0]
}
 2b0:	e8bd0010 	ldmfd	sp!, {r4}
 2b4:	e12fff1e 	bx	lr

000002b8 <config_GIC>:

/* Configure the Generic Interrupt Controller (GIC) */
void config_GIC(void)
{
 2b8:	e92d4008 	push	{r3, lr}
    config_interrupt (73, 1); // configure the FPGA KEYs interrupt (73)
 2bc:	e3a00049 	mov	r0, #73	; 0x49
 2c0:	e3a01001 	mov	r1, #1
 2c4:	ebffffee 	bl	284 <config_interrupt>
    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities
    *((int *) 0xFFFEC104) = 0xFFFF;
 2c8:	e3e02a13 	mvn	r2, #77824	; 0x13000
 2cc:	e30f3fff 	movw	r3, #65535	; 0xffff
 2d0:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
    // Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
    *((int *) 0xFFFEC100) = 1;
 2d4:	e3a03001 	mov	r3, #1
 2d8:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
    // Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs
    *((int *) 0xFFFED000) = 1;
 2dc:	e3e02a12 	mvn	r2, #73728	; 0x12000
 2e0:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
 2e4:	e8bd8008 	pop	{r3, pc}

000002e8 <config_KEYs>:

/* Set up the pushbutton KEYs port in the FPGA */
void config_KEYs(void)
{
    volatile int * KEY_ptr = (int *) 0xFF200050; // pushbutton KEY base address
    *(KEY_ptr + 2) = 0xF; // enable interrupts for the four KEYs
 2e8:	e3a03000 	mov	r3, #0
 2ec:	e34f3f20 	movt	r3, #65312	; 0xff20
 2f0:	e3a0200f 	mov	r2, #15
 2f4:	e5832058 	str	r2, [r3, #88]	; 0x58
 2f8:	e12fff1e 	bx	lr

000002fc <enable_A9_interrupts>:

/* Turn on interrupts in the ARM processor */
void enable_A9_interrupts(void)
{
    int status = 0b01010011; // 01: enable interrupte, 0: arm mode, 10011: supervisor mode
    asm(
 2fc:	e3a03053 	mov	r3, #83	; 0x53
 300:	e129f003 	msr	CPSR_fc, r3
 304:	e12fff1e 	bx	lr

00000308 <main>:
void config_KEYs(void); // configure pushbutton KEYs to generate interrupts
void enable_A9_interrupts (void); // enable interrupts in the A9 processor

/* the main function */
int main(void)
{
 308:	e92d4008 	push	{r3, lr}
    disable_A9_interrupts(); // disable interrupts in the A9 processor
 30c:	ebffffd2 	bl	25c <disable_A9_interrupts>
    set_A9_IRQ_stack(); // initialize the stack pointer for IRQ mode
 310:	ebffffd4 	bl	268 <set_A9_IRQ_stack>
    config_GIC(); // configure the general interrupt controller
 314:	ebffffe7 	bl	2b8 <config_GIC>
    config_KEYs(); // configure pushbutton KEYs to generate interrupts
 318:	ebfffff2 	bl	2e8 <config_KEYs>
    enable_A9_interrupts (); // enable interrupts in the A9 processor
 31c:	ebfffff6 	bl	2fc <enable_A9_interrupts>
 320:	eafffffe 	b	320 <main+0x18>

00000324 <pushbutton_ISR>:
    volatile char* HEX0_ptr = (char*) 0xFF200020;
    volatile char* HEX1_ptr = HEX0_ptr + 1;
    volatile char* HEX2_ptr = HEX0_ptr + 2;
    volatile char* HEX3_ptr = HEX0_ptr + 3;
    int press;
    press = *(KEY_ptr + 3); // read the pushbutton interrupt register
 324:	e3a03000 	mov	r3, #0
 328:	e34f3f20 	movt	r3, #65312	; 0xff20
 32c:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
    *(KEY_ptr + 3) = press; // Clear the interrupt
 330:	e583205c 	str	r2, [r3, #92]	; 0x5c
    if (press & 0x1) // KEY0
 334:	e3120001 	tst	r2, #1
 338:	0a00000a 	beq	368 <pushbutton_ISR+0x44>
    {
        if (*HEX0_ptr == blank)
 33c:	e3a03000 	mov	r3, #0
 340:	e34f3f20 	movt	r3, #65312	; 0xff20
 344:	e5d33020 	ldrb	r3, [r3, #32]
 348:	e3530000 	cmp	r3, #0
        *HEX0_ptr = number[0];
 34c:	034f3f20 	movteq	r3, #65312	; 0xff20
 350:	03a0203f 	moveq	r2, #63	; 0x3f
        else
        *HEX0_ptr = blank;
 354:	13a03000 	movne	r3, #0
 358:	134f3f20 	movtne	r3, #65312	; 0xff20
 35c:	13a02000 	movne	r2, #0
 360:	e5c32020 	strb	r2, [r3, #32]
 364:	e12fff1e 	bx	lr
    }
    else if (press & 0x2) // KEY1
 368:	e3120002 	tst	r2, #2
 36c:	0a00000a 	beq	39c <pushbutton_ISR+0x78>
    {
        if (*HEX1_ptr == blank)
 370:	e3a03000 	mov	r3, #0
 374:	e34f3f20 	movt	r3, #65312	; 0xff20
 378:	e5d33021 	ldrb	r3, [r3, #33]	; 0x21
 37c:	e3530000 	cmp	r3, #0
        *HEX1_ptr = number[1];
 380:	034f3f20 	movteq	r3, #65312	; 0xff20
 384:	03a02006 	moveq	r2, #6
        else
        *HEX1_ptr = blank;
 388:	13a03000 	movne	r3, #0
 38c:	134f3f20 	movtne	r3, #65312	; 0xff20
 390:	13a02000 	movne	r2, #0
 394:	e5c32021 	strb	r2, [r3, #33]	; 0x21
 398:	e12fff1e 	bx	lr
    }
    else if (press & 0x4) // KEY2
 39c:	e3120004 	tst	r2, #4
 3a0:	0a00000a 	beq	3d0 <pushbutton_ISR+0xac>
    {
        if (*HEX2_ptr == blank)
 3a4:	e3a03000 	mov	r3, #0
 3a8:	e34f3f20 	movt	r3, #65312	; 0xff20
 3ac:	e5d33022 	ldrb	r3, [r3, #34]	; 0x22
 3b0:	e3530000 	cmp	r3, #0
        *HEX2_ptr = number[2];
 3b4:	034f3f20 	movteq	r3, #65312	; 0xff20
 3b8:	03a0205b 	moveq	r2, #91	; 0x5b
        else
        *HEX2_ptr = blank;
 3bc:	13a03000 	movne	r3, #0
 3c0:	134f3f20 	movtne	r3, #65312	; 0xff20
 3c4:	13a02000 	movne	r2, #0
 3c8:	e5c32022 	strb	r2, [r3, #34]	; 0x22
 3cc:	e12fff1e 	bx	lr
    }
    else // press & 0x8, which is KEY3
    {
        if (*HEX3_ptr == blank)
 3d0:	e3a03000 	mov	r3, #0
 3d4:	e34f3f20 	movt	r3, #65312	; 0xff20
 3d8:	e5d33023 	ldrb	r3, [r3, #35]	; 0x23
 3dc:	e3530000 	cmp	r3, #0
        *HEX3_ptr = number[3];
 3e0:	034f3f20 	movteq	r3, #65312	; 0xff20
 3e4:	03a0204f 	moveq	r2, #79	; 0x4f
        else
        *HEX3_ptr = blank;
 3e8:	13a03000 	movne	r3, #0
 3ec:	134f3f20 	movtne	r3, #65312	; 0xff20
 3f0:	13a02000 	movne	r2, #0
 3f4:	e5c32023 	strb	r2, [r3, #35]	; 0x23
 3f8:	e12fff1e 	bx	lr

000003fc <__cs3_isr_irq>:
}

/* Define the IRQ exception handler */
void pushbutton_ISR(void); //declare
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
 3fc:	e24ee004 	sub	lr, lr, #4
 400:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
    // Read the ICCIAR from the CPU Interface in the GIC
    int interrupt_ID = *((int *)0xFFFEC10C);
 404:	e3e03a13 	mvn	r3, #77824	; 0x13000
    if (interrupt_ID == 73) // check if interrupt is from the KEYs
 408:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
 40c:	e3530049 	cmp	r3, #73	; 0x49
 410:	1a000004 	bne	428 <__cs3_isr_irq+0x2c>
    {
        pushbutton_ISR();
 414:	ebffffc2 	bl	324 <pushbutton_ISR>
    else
    {
        while (1); // if unexpected, then stay here
    }
    // Write to the End of Interrupt Register (ICCEOIR)
    *((int *)0xFFFEC110) = interrupt_ID;
 418:	e3a02049 	mov	r2, #73	; 0x49
 41c:	e3e03a13 	mvn	r3, #77824	; 0x13000
 420:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
 424:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
 428:	eafffffe 	b	428 <__cs3_isr_irq+0x2c>

0000042c <__cs3_reset>:
        *HEX3_ptr = blank;
    }
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void) {
 42c:	eafffffe 	b	42c <__cs3_reset>

00000430 <__cs3_isr_undef>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_undef(void) {
 430:	eafffffe 	b	430 <__cs3_isr_undef>

00000434 <__cs3_isr_swi>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_swi(void) {
 434:	eafffffe 	b	434 <__cs3_isr_swi>

00000438 <__cs3_isr_pabort>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_pabort(void) {
 438:	eafffffe 	b	438 <__cs3_isr_pabort>

0000043c <__cs3_isr_dabort>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_dabort(void) {
 43c:	eafffffe 	b	43c <__cs3_isr_dabort>

00000440 <__cs3_isr_fiq>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_fiq(void) {
 440:	eafffffe 	b	440 <__cs3_isr_fiq>

00000444 <atexit>:
 444:	e1a01000 	mov	r1, r0
 448:	e3a00000 	mov	r0, #0
 44c:	e92d4008 	push	{r3, lr}
 450:	e1a02000 	mov	r2, r0
 454:	e1a03000 	mov	r3, r0
 458:	eb00000e 	bl	498 <__register_exitproc>
 45c:	e8bd4008 	pop	{r3, lr}
 460:	e12fff1e 	bx	lr

00000464 <exit>:
 464:	e92d4008 	push	{r3, lr}
 468:	e3a01000 	mov	r1, #0
 46c:	e1a04000 	mov	r4, r0
 470:	eb000045 	bl	58c <__call_exitprocs>
 474:	e59f3018 	ldr	r3, [pc, #24]	; 494 <exit+0x30>
 478:	e5930000 	ldr	r0, [r3]
 47c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 480:	e3530000 	cmp	r3, #0
 484:	11a0e00f 	movne	lr, pc
 488:	112fff13 	bxne	r3
 48c:	e1a00004 	mov	r0, r4
 490:	eb0000c9 	bl	7bc <_exit>
 494:	00000864 	.word	0x00000864

00000498 <__register_exitproc>:
 498:	e59fc0e4 	ldr	r12, [pc, #228]	; 584 <__register_exitproc+0xec>
 49c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4a0:	e59c4000 	ldr	r4, [r12]
 4a4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 4a8:	e35c0000 	cmp	r12, #0
 4ac:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 4b0:	e59c5004 	ldr	r5, [r12, #4]
 4b4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 4b8:	e355001f 	cmp	r5, #31
 4bc:	e24dd010 	sub	sp, sp, #16
 4c0:	e1a06000 	mov	r6, r0
 4c4:	da000015 	ble	520 <__register_exitproc+0x88>
 4c8:	e59f00b8 	ldr	r0, [pc, #184]	; 588 <__register_exitproc+0xf0>
 4cc:	e3500000 	cmp	r0, #0
 4d0:	1a000001 	bne	4dc <__register_exitproc+0x44>
 4d4:	e3e00000 	mvn	r0, #0
 4d8:	ea000018 	b	540 <__register_exitproc+0xa8>
 4dc:	e3a00e19 	mov	r0, #400	; 0x190
 4e0:	e58d100c 	str	r1, [sp, #12]
 4e4:	e58d2008 	str	r2, [sp, #8]
 4e8:	e58d3004 	str	r3, [sp, #4]
 4ec:	e320f000 	nop	{0}
 4f0:	e250c000 	subs	r12, r0, #0
 4f4:	e59d100c 	ldr	r1, [sp, #12]
 4f8:	e59d2008 	ldr	r2, [sp, #8]
 4fc:	e59d3004 	ldr	r3, [sp, #4]
 500:	0afffff3 	beq	4d4 <__register_exitproc+0x3c>
 504:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 508:	e3a00000 	mov	r0, #0
 50c:	e58c0004 	str	r0, [r12, #4]
 510:	e58c5000 	str	r5, [r12]
 514:	e584c148 	str	r12, [r4, #328]	; 0x148
 518:	e58c0188 	str	r0, [r12, #392]	; 0x188
 51c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 520:	e3560000 	cmp	r6, #0
 524:	e59c4004 	ldr	r4, [r12, #4]
 528:	1a000007 	bne	54c <__register_exitproc+0xb4>
 52c:	e2843002 	add	r3, r4, #2
 530:	e2844001 	add	r4, r4, #1
 534:	e78c1103 	str	r1, [r12, r3, lsl #2]
 538:	e58c4004 	str	r4, [r12, #4]
 53c:	e3a00000 	mov	r0, #0
 540:	e28dd010 	add	sp, sp, #16
 544:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 548:	e12fff1e 	bx	lr
 54c:	e3a00001 	mov	r0, #1
 550:	e1a00410 	lsl	r0, r0, r4
 554:	e08c8104 	add	r8, r12, r4, lsl #2
 558:	e3560002 	cmp	r6, #2
 55c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 560:	e5883108 	str	r3, [r8, #264]	; 0x108
 564:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 568:	e1877000 	orr	r7, r7, r0
 56c:	01830000 	orreq	r0, r3, r0
 570:	e1a05008 	mov	r5, r8
 574:	e5882088 	str	r2, [r8, #136]	; 0x88
 578:	e58c7188 	str	r7, [r12, #392]	; 0x188
 57c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 580:	eaffffe9 	b	52c <__register_exitproc+0x94>
 584:	00000864 	.word	0x00000864
 588:	00000000 	.word	0x00000000

0000058c <__call_exitprocs>:
 58c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 590:	e59f3168 	ldr	r3, [pc, #360]	; 700 <__call_exitprocs+0x174>
 594:	e5933000 	ldr	r3, [r3]
 598:	e24dd014 	sub	sp, sp, #20
 59c:	e58d3004 	str	r3, [sp, #4]
 5a0:	e2833f52 	add	r3, r3, #328	; 0x148
 5a4:	e58d0008 	str	r0, [sp, #8]
 5a8:	e58d300c 	str	r3, [sp, #12]
 5ac:	e1a07001 	mov	r7, r1
 5b0:	e3a08001 	mov	r8, #1
 5b4:	e59d3004 	ldr	r3, [sp, #4]
 5b8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 5bc:	e3560000 	cmp	r6, #0
 5c0:	e59db00c 	ldr	r11, [sp, #12]
 5c4:	0a000033 	beq	698 <__call_exitprocs+0x10c>
 5c8:	e5965004 	ldr	r5, [r6, #4]
 5cc:	e2554001 	subs	r4, r5, #1
 5d0:	5286a088 	addpl	r10, r6, #136	; 0x88
 5d4:	5285501f 	addpl	r5, r5, #31
 5d8:	508a5105 	addpl	r5, r10, r5, lsl #2
 5dc:	5a000007 	bpl	600 <__call_exitprocs+0x74>
 5e0:	ea000029 	b	68c <__call_exitprocs+0x100>
 5e4:	e5953000 	ldr	r3, [r5]
 5e8:	e1530007 	cmp	r3, r7
 5ec:	0a000005 	beq	608 <__call_exitprocs+0x7c>
 5f0:	e2444001 	sub	r4, r4, #1
 5f4:	e3740001 	cmn	r4, #1
 5f8:	e2455004 	sub	r5, r5, #4
 5fc:	0a000022 	beq	68c <__call_exitprocs+0x100>
 600:	e3570000 	cmp	r7, #0
 604:	1afffff6 	bne	5e4 <__call_exitprocs+0x58>
 608:	e5963004 	ldr	r3, [r6, #4]
 60c:	e06a2005 	rsb	r2, r10, r5
 610:	e2433001 	sub	r3, r3, #1
 614:	e0862002 	add	r2, r6, r2
 618:	e1530004 	cmp	r3, r4
 61c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 620:	13a01000 	movne	r1, #0
 624:	05864004 	streq	r4, [r6, #4]
 628:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 62c:	e3530000 	cmp	r3, #0
 630:	0affffee 	beq	5f0 <__call_exitprocs+0x64>
 634:	e1a02418 	lsl	r2, r8, r4
 638:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 63c:	e1120001 	tst	r2, r1
 640:	e5969004 	ldr	r9, [r6, #4]
 644:	0a000016 	beq	6a4 <__call_exitprocs+0x118>
 648:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 64c:	e1120001 	tst	r2, r1
 650:	1a000016 	bne	6b0 <__call_exitprocs+0x124>
 654:	e59d0008 	ldr	r0, [sp, #8]
 658:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 65c:	e1a0e00f 	mov	lr, pc
 660:	e12fff13 	bx	r3
 664:	e5963004 	ldr	r3, [r6, #4]
 668:	e1530009 	cmp	r3, r9
 66c:	1affffd0 	bne	5b4 <__call_exitprocs+0x28>
 670:	e59b3000 	ldr	r3, [r11]
 674:	e1530006 	cmp	r3, r6
 678:	1affffcd 	bne	5b4 <__call_exitprocs+0x28>
 67c:	e2444001 	sub	r4, r4, #1
 680:	e3740001 	cmn	r4, #1
 684:	e2455004 	sub	r5, r5, #4
 688:	1affffdc 	bne	600 <__call_exitprocs+0x74>
 68c:	e59f1070 	ldr	r1, [pc, #112]	; 704 <__call_exitprocs+0x178>
 690:	e3510000 	cmp	r1, #0
 694:	1a000009 	bne	6c0 <__call_exitprocs+0x134>
 698:	e28dd014 	add	sp, sp, #20
 69c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6a0:	e12fff1e 	bx	lr
 6a4:	e1a0e00f 	mov	lr, pc
 6a8:	e12fff13 	bx	r3
 6ac:	eaffffec 	b	664 <__call_exitprocs+0xd8>
 6b0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 6b4:	e1a0e00f 	mov	lr, pc
 6b8:	e12fff13 	bx	r3
 6bc:	eaffffe8 	b	664 <__call_exitprocs+0xd8>
 6c0:	e5963004 	ldr	r3, [r6, #4]
 6c4:	e3530000 	cmp	r3, #0
 6c8:	e5963000 	ldr	r3, [r6]
 6cc:	1a000008 	bne	6f4 <__call_exitprocs+0x168>
 6d0:	e3530000 	cmp	r3, #0
 6d4:	0a000006 	beq	6f4 <__call_exitprocs+0x168>
 6d8:	e1a00006 	mov	r0, r6
 6dc:	e58b3000 	str	r3, [r11]
 6e0:	e320f000 	nop	{0}
 6e4:	e59b6000 	ldr	r6, [r11]
 6e8:	e3560000 	cmp	r6, #0
 6ec:	1affffb5 	bne	5c8 <__call_exitprocs+0x3c>
 6f0:	eaffffe8 	b	698 <__call_exitprocs+0x10c>
 6f4:	e1a0b006 	mov	r11, r6
 6f8:	e1a06003 	mov	r6, r3
 6fc:	eafffff9 	b	6e8 <__call_exitprocs+0x15c>
 700:	00000864 	.word	0x00000864
 704:	00000000 	.word	0x00000000

00000708 <register_fini>:
 708:	e92d4008 	push	{r3, lr}
 70c:	e59f3010 	ldr	r3, [pc, #16]	; 724 <register_fini+0x1c>
 710:	e3530000 	cmp	r3, #0
 714:	159f000c 	ldrne	r0, [pc, #12]	; 728 <register_fini+0x20>
 718:	1bffff49 	blne	444 <atexit>
 71c:	e8bd4008 	pop	{r3, lr}
 720:	e12fff1e 	bx	lr
 724:	0000088c 	.word	0x0000088c
 728:	0000072c 	.word	0x0000072c

0000072c <__libc_fini_array>:
 72c:	e92d4038 	push	{r3, r4, r5, lr}
 730:	e59f5030 	ldr	r5, [pc, #48]	; 768 <__libc_fini_array+0x3c>
 734:	e59f4030 	ldr	r4, [pc, #48]	; 76c <__libc_fini_array+0x40>
 738:	e0654004 	rsb	r4, r5, r4
 73c:	e1b04144 	asrs	r4, r4, #2
 740:	10855104 	addne	r5, r5, r4, lsl #2
 744:	0a000004 	beq	75c <__libc_fini_array+0x30>
 748:	e5353004 	ldr	r3, [r5, #-4]!
 74c:	e1a0e00f 	mov	lr, pc
 750:	e12fff13 	bx	r3
 754:	e2544001 	subs	r4, r4, #1
 758:	1afffffa 	bne	748 <__libc_fini_array+0x1c>
 75c:	eb00004a 	bl	88c <__libc_fini>
 760:	e8bd4038 	pop	{r3, r4, r5, lr}
 764:	e12fff1e 	bx	lr
 768:	000008a4 	.word	0x000008a4
 76c:	000008a8 	.word	0x000008a8

00000770 <__cs3_premain>:
 770:	e92d4008 	push	{r3, lr}
 774:	eb000017 	bl	7d8 <__libc_init_array>
 778:	e59f3030 	ldr	r3, [pc, #48]	; 7b0 <__cs3_premain+0x40>
 77c:	e3530000 	cmp	r3, #0
 780:	15930000 	ldrne	r0, [r3]
 784:	01a00003 	moveq	r0, r3
 788:	e59f3024 	ldr	r3, [pc, #36]	; 7b4 <__cs3_premain+0x44>
 78c:	e3530000 	cmp	r3, #0
 790:	15931000 	ldrne	r1, [r3]
 794:	01a01003 	moveq	r1, r3
 798:	e3a02000 	mov	r2, #0
 79c:	ebfffed9 	bl	308 <main>
 7a0:	e59f3010 	ldr	r3, [pc, #16]	; 7b8 <__cs3_premain+0x48>
 7a4:	e3530000 	cmp	r3, #0
 7a8:	1bffff2d 	blne	464 <exit>
 7ac:	eafffffe 	b	7ac <__cs3_premain+0x3c>
	...
 7b8:	00000464 	.word	0x00000464

000007bc <_exit>:
 7bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 7c0:	e3a00018 	mov	r0, #24
 7c4:	e59f1004 	ldr	r1, [pc, #4]	; 7d0 <_exit+0x14>
 7c8:	ef123456 	svc	0x00123456
 7cc:	eafffffe 	b	7cc <_exit+0x10>
 7d0:	00020026 	.word	0x00020026

000007d4 <__cs3_isr_interrupt>:
 7d4:	eafffffe 	b	7d4 <__cs3_isr_interrupt>

000007d8 <__libc_init_array>:
 7d8:	e92d4070 	push	{r4, r5, r6, lr}
 7dc:	e59f506c 	ldr	r5, [pc, #108]	; 850 <__libc_init_array+0x78>
 7e0:	e59f606c 	ldr	r6, [pc, #108]	; 854 <__libc_init_array+0x7c>
 7e4:	e0656006 	rsb	r6, r5, r6
 7e8:	e1b06146 	asrs	r6, r6, #2
 7ec:	12455004 	subne	r5, r5, #4
 7f0:	13a04000 	movne	r4, #0
 7f4:	0a000005 	beq	810 <__libc_init_array+0x38>
 7f8:	e5b53004 	ldr	r3, [r5, #4]!
 7fc:	e2844001 	add	r4, r4, #1
 800:	e1a0e00f 	mov	lr, pc
 804:	e12fff13 	bx	r3
 808:	e1560004 	cmp	r6, r4
 80c:	1afffff9 	bne	7f8 <__libc_init_array+0x20>
 810:	e59f5040 	ldr	r5, [pc, #64]	; 858 <__libc_init_array+0x80>
 814:	e59f6040 	ldr	r6, [pc, #64]	; 85c <__libc_init_array+0x84>
 818:	e0656006 	rsb	r6, r5, r6
 81c:	eb000012 	bl	86c <_init>
 820:	e1b06146 	asrs	r6, r6, #2
 824:	12455004 	subne	r5, r5, #4
 828:	13a04000 	movne	r4, #0
 82c:	0a000005 	beq	848 <__libc_init_array+0x70>
 830:	e5b53004 	ldr	r3, [r5, #4]!
 834:	e2844001 	add	r4, r4, #1
 838:	e1a0e00f 	mov	lr, pc
 83c:	e12fff13 	bx	r3
 840:	e1560004 	cmp	r6, r4
 844:	1afffff9 	bne	830 <__libc_init_array+0x58>
 848:	e8bd4070 	pop	{r4, r5, r6, lr}
 84c:	e12fff1e 	bx	lr
 850:	00000884 	.word	0x00000884
 854:	00000884 	.word	0x00000884
 858:	00000884 	.word	0x00000884
 85c:	0000088c 	.word	0x0000088c

Disassembly of section .rodata:

00000864 <_global_impure_ptr>:
 864:	000008d0 00000043                       ....C...

0000086c <_init>:
 86c:	e1a0c00d 	mov	r12, sp
 870:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 874:	e24cb004 	sub	r11, r12, #4
 878:	e24bd028 	sub	sp, r11, #40	; 0x28
 87c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 880:	e12fff1e 	bx	lr

00000884 <__init_array_start>:
 884:	00000708 	.word	0x00000708

00000888 <__frame_dummy_init_array_entry>:
 888:	00000208                                ....

0000088c <__libc_fini>:
 88c:	e1a0c00d 	mov	r12, sp
 890:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 894:	e24cb004 	sub	r11, r12, #4
 898:	e24bd028 	sub	sp, r11, #40	; 0x28
 89c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8a0:	e12fff1e 	bx	lr

000008a4 <__fini_array_start>:
 8a4:	000001c4 	.word	0x000001c4

000008a8 <__cs3_regions>:
 8a8:	00000000 	.word	0x00000000
 8ac:	00000040 	.word	0x00000040
 8b0:	00000040 	.word	0x00000040
 8b4:	00000cc0 	.word	0x00000cc0
 8b8:	00000020 	.word	0x00000020

000008bc <__cs3_regions_end>:
 8bc:	00000000 	.word	0x00000000
